
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MessageRead` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MessageRead
 * 
 */
export type MessageReadModel = runtime.Types.Result.DefaultSelection<Prisma.$MessageReadPayload>

export type AggregateMessageRead = {
  _count: MessageReadCountAggregateOutputType | null
  _min: MessageReadMinAggregateOutputType | null
  _max: MessageReadMaxAggregateOutputType | null
}

export type MessageReadMinAggregateOutputType = {
  userId: string | null
  messageId: string | null
  readAt: Date | null
}

export type MessageReadMaxAggregateOutputType = {
  userId: string | null
  messageId: string | null
  readAt: Date | null
}

export type MessageReadCountAggregateOutputType = {
  userId: number
  messageId: number
  readAt: number
  _all: number
}


export type MessageReadMinAggregateInputType = {
  userId?: true
  messageId?: true
  readAt?: true
}

export type MessageReadMaxAggregateInputType = {
  userId?: true
  messageId?: true
  readAt?: true
}

export type MessageReadCountAggregateInputType = {
  userId?: true
  messageId?: true
  readAt?: true
  _all?: true
}

export type MessageReadAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MessageRead to aggregate.
   */
  where?: Prisma.MessageReadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReads to fetch.
   */
  orderBy?: Prisma.MessageReadOrderByWithRelationInput | Prisma.MessageReadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MessageReadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MessageReads
  **/
  _count?: true | MessageReadCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MessageReadMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MessageReadMaxAggregateInputType
}

export type GetMessageReadAggregateType<T extends MessageReadAggregateArgs> = {
      [P in keyof T & keyof AggregateMessageRead]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMessageRead[P]>
    : Prisma.GetScalarType<T[P], AggregateMessageRead[P]>
}




export type MessageReadGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MessageReadWhereInput
  orderBy?: Prisma.MessageReadOrderByWithAggregationInput | Prisma.MessageReadOrderByWithAggregationInput[]
  by: Prisma.MessageReadScalarFieldEnum[] | Prisma.MessageReadScalarFieldEnum
  having?: Prisma.MessageReadScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MessageReadCountAggregateInputType | true
  _min?: MessageReadMinAggregateInputType
  _max?: MessageReadMaxAggregateInputType
}

export type MessageReadGroupByOutputType = {
  userId: string
  messageId: string
  readAt: Date
  _count: MessageReadCountAggregateOutputType | null
  _min: MessageReadMinAggregateOutputType | null
  _max: MessageReadMaxAggregateOutputType | null
}

type GetMessageReadGroupByPayload<T extends MessageReadGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MessageReadGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MessageReadGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MessageReadGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MessageReadGroupByOutputType[P]>
      }
    >
  >



export type MessageReadWhereInput = {
  AND?: Prisma.MessageReadWhereInput | Prisma.MessageReadWhereInput[]
  OR?: Prisma.MessageReadWhereInput[]
  NOT?: Prisma.MessageReadWhereInput | Prisma.MessageReadWhereInput[]
  userId?: Prisma.StringFilter<"MessageRead"> | string
  messageId?: Prisma.StringFilter<"MessageRead"> | string
  readAt?: Prisma.DateTimeFilter<"MessageRead"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  message?: Prisma.XOR<Prisma.MessageScalarRelationFilter, Prisma.MessageWhereInput>
}

export type MessageReadOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  message?: Prisma.MessageOrderByWithRelationInput
}

export type MessageReadWhereUniqueInput = Prisma.AtLeast<{
  userId_messageId?: Prisma.MessageReadUserIdMessageIdCompoundUniqueInput
  AND?: Prisma.MessageReadWhereInput | Prisma.MessageReadWhereInput[]
  OR?: Prisma.MessageReadWhereInput[]
  NOT?: Prisma.MessageReadWhereInput | Prisma.MessageReadWhereInput[]
  userId?: Prisma.StringFilter<"MessageRead"> | string
  messageId?: Prisma.StringFilter<"MessageRead"> | string
  readAt?: Prisma.DateTimeFilter<"MessageRead"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  message?: Prisma.XOR<Prisma.MessageScalarRelationFilter, Prisma.MessageWhereInput>
}, "userId_messageId">

export type MessageReadOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
  _count?: Prisma.MessageReadCountOrderByAggregateInput
  _max?: Prisma.MessageReadMaxOrderByAggregateInput
  _min?: Prisma.MessageReadMinOrderByAggregateInput
}

export type MessageReadScalarWhereWithAggregatesInput = {
  AND?: Prisma.MessageReadScalarWhereWithAggregatesInput | Prisma.MessageReadScalarWhereWithAggregatesInput[]
  OR?: Prisma.MessageReadScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MessageReadScalarWhereWithAggregatesInput | Prisma.MessageReadScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"MessageRead"> | string
  messageId?: Prisma.StringWithAggregatesFilter<"MessageRead"> | string
  readAt?: Prisma.DateTimeWithAggregatesFilter<"MessageRead"> | Date | string
}

export type MessageReadCreateInput = {
  readAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutReadMessagesInput
  message: Prisma.MessageCreateNestedOneWithoutReadByInput
}

export type MessageReadUncheckedCreateInput = {
  userId: string
  messageId: string
  readAt?: Date | string
}

export type MessageReadUpdateInput = {
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutReadMessagesNestedInput
  message?: Prisma.MessageUpdateOneRequiredWithoutReadByNestedInput
}

export type MessageReadUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadCreateManyInput = {
  userId: string
  messageId: string
  readAt?: Date | string
}

export type MessageReadUpdateManyMutationInput = {
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadListRelationFilter = {
  every?: Prisma.MessageReadWhereInput
  some?: Prisma.MessageReadWhereInput
  none?: Prisma.MessageReadWhereInput
}

export type MessageReadOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MessageReadUserIdMessageIdCompoundUniqueInput = {
  userId: string
  messageId: string
}

export type MessageReadCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
}

export type MessageReadMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
}

export type MessageReadMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
}

export type MessageReadCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MessageReadCreateWithoutUserInput, Prisma.MessageReadUncheckedCreateWithoutUserInput> | Prisma.MessageReadCreateWithoutUserInput[] | Prisma.MessageReadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MessageReadCreateOrConnectWithoutUserInput | Prisma.MessageReadCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MessageReadCreateManyUserInputEnvelope
  connect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
}

export type MessageReadUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MessageReadCreateWithoutUserInput, Prisma.MessageReadUncheckedCreateWithoutUserInput> | Prisma.MessageReadCreateWithoutUserInput[] | Prisma.MessageReadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MessageReadCreateOrConnectWithoutUserInput | Prisma.MessageReadCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MessageReadCreateManyUserInputEnvelope
  connect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
}

export type MessageReadUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReadCreateWithoutUserInput, Prisma.MessageReadUncheckedCreateWithoutUserInput> | Prisma.MessageReadCreateWithoutUserInput[] | Prisma.MessageReadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MessageReadCreateOrConnectWithoutUserInput | Prisma.MessageReadCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MessageReadUpsertWithWhereUniqueWithoutUserInput | Prisma.MessageReadUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MessageReadCreateManyUserInputEnvelope
  set?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  disconnect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  delete?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  connect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  update?: Prisma.MessageReadUpdateWithWhereUniqueWithoutUserInput | Prisma.MessageReadUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MessageReadUpdateManyWithWhereWithoutUserInput | Prisma.MessageReadUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MessageReadScalarWhereInput | Prisma.MessageReadScalarWhereInput[]
}

export type MessageReadUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReadCreateWithoutUserInput, Prisma.MessageReadUncheckedCreateWithoutUserInput> | Prisma.MessageReadCreateWithoutUserInput[] | Prisma.MessageReadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MessageReadCreateOrConnectWithoutUserInput | Prisma.MessageReadCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MessageReadUpsertWithWhereUniqueWithoutUserInput | Prisma.MessageReadUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MessageReadCreateManyUserInputEnvelope
  set?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  disconnect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  delete?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  connect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  update?: Prisma.MessageReadUpdateWithWhereUniqueWithoutUserInput | Prisma.MessageReadUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MessageReadUpdateManyWithWhereWithoutUserInput | Prisma.MessageReadUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MessageReadScalarWhereInput | Prisma.MessageReadScalarWhereInput[]
}

export type MessageReadCreateNestedManyWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.MessageReadCreateWithoutMessageInput, Prisma.MessageReadUncheckedCreateWithoutMessageInput> | Prisma.MessageReadCreateWithoutMessageInput[] | Prisma.MessageReadUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReadCreateOrConnectWithoutMessageInput | Prisma.MessageReadCreateOrConnectWithoutMessageInput[]
  createMany?: Prisma.MessageReadCreateManyMessageInputEnvelope
  connect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
}

export type MessageReadUncheckedCreateNestedManyWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.MessageReadCreateWithoutMessageInput, Prisma.MessageReadUncheckedCreateWithoutMessageInput> | Prisma.MessageReadCreateWithoutMessageInput[] | Prisma.MessageReadUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReadCreateOrConnectWithoutMessageInput | Prisma.MessageReadCreateOrConnectWithoutMessageInput[]
  createMany?: Prisma.MessageReadCreateManyMessageInputEnvelope
  connect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
}

export type MessageReadUpdateManyWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReadCreateWithoutMessageInput, Prisma.MessageReadUncheckedCreateWithoutMessageInput> | Prisma.MessageReadCreateWithoutMessageInput[] | Prisma.MessageReadUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReadCreateOrConnectWithoutMessageInput | Prisma.MessageReadCreateOrConnectWithoutMessageInput[]
  upsert?: Prisma.MessageReadUpsertWithWhereUniqueWithoutMessageInput | Prisma.MessageReadUpsertWithWhereUniqueWithoutMessageInput[]
  createMany?: Prisma.MessageReadCreateManyMessageInputEnvelope
  set?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  disconnect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  delete?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  connect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  update?: Prisma.MessageReadUpdateWithWhereUniqueWithoutMessageInput | Prisma.MessageReadUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.MessageReadUpdateManyWithWhereWithoutMessageInput | Prisma.MessageReadUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.MessageReadScalarWhereInput | Prisma.MessageReadScalarWhereInput[]
}

export type MessageReadUncheckedUpdateManyWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReadCreateWithoutMessageInput, Prisma.MessageReadUncheckedCreateWithoutMessageInput> | Prisma.MessageReadCreateWithoutMessageInput[] | Prisma.MessageReadUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReadCreateOrConnectWithoutMessageInput | Prisma.MessageReadCreateOrConnectWithoutMessageInput[]
  upsert?: Prisma.MessageReadUpsertWithWhereUniqueWithoutMessageInput | Prisma.MessageReadUpsertWithWhereUniqueWithoutMessageInput[]
  createMany?: Prisma.MessageReadCreateManyMessageInputEnvelope
  set?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  disconnect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  delete?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  connect?: Prisma.MessageReadWhereUniqueInput | Prisma.MessageReadWhereUniqueInput[]
  update?: Prisma.MessageReadUpdateWithWhereUniqueWithoutMessageInput | Prisma.MessageReadUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.MessageReadUpdateManyWithWhereWithoutMessageInput | Prisma.MessageReadUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.MessageReadScalarWhereInput | Prisma.MessageReadScalarWhereInput[]
}

export type MessageReadCreateWithoutUserInput = {
  readAt?: Date | string
  message: Prisma.MessageCreateNestedOneWithoutReadByInput
}

export type MessageReadUncheckedCreateWithoutUserInput = {
  messageId: string
  readAt?: Date | string
}

export type MessageReadCreateOrConnectWithoutUserInput = {
  where: Prisma.MessageReadWhereUniqueInput
  create: Prisma.XOR<Prisma.MessageReadCreateWithoutUserInput, Prisma.MessageReadUncheckedCreateWithoutUserInput>
}

export type MessageReadCreateManyUserInputEnvelope = {
  data: Prisma.MessageReadCreateManyUserInput | Prisma.MessageReadCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MessageReadUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MessageReadWhereUniqueInput
  update: Prisma.XOR<Prisma.MessageReadUpdateWithoutUserInput, Prisma.MessageReadUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MessageReadCreateWithoutUserInput, Prisma.MessageReadUncheckedCreateWithoutUserInput>
}

export type MessageReadUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MessageReadWhereUniqueInput
  data: Prisma.XOR<Prisma.MessageReadUpdateWithoutUserInput, Prisma.MessageReadUncheckedUpdateWithoutUserInput>
}

export type MessageReadUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MessageReadScalarWhereInput
  data: Prisma.XOR<Prisma.MessageReadUpdateManyMutationInput, Prisma.MessageReadUncheckedUpdateManyWithoutUserInput>
}

export type MessageReadScalarWhereInput = {
  AND?: Prisma.MessageReadScalarWhereInput | Prisma.MessageReadScalarWhereInput[]
  OR?: Prisma.MessageReadScalarWhereInput[]
  NOT?: Prisma.MessageReadScalarWhereInput | Prisma.MessageReadScalarWhereInput[]
  userId?: Prisma.StringFilter<"MessageRead"> | string
  messageId?: Prisma.StringFilter<"MessageRead"> | string
  readAt?: Prisma.DateTimeFilter<"MessageRead"> | Date | string
}

export type MessageReadCreateWithoutMessageInput = {
  readAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutReadMessagesInput
}

export type MessageReadUncheckedCreateWithoutMessageInput = {
  userId: string
  readAt?: Date | string
}

export type MessageReadCreateOrConnectWithoutMessageInput = {
  where: Prisma.MessageReadWhereUniqueInput
  create: Prisma.XOR<Prisma.MessageReadCreateWithoutMessageInput, Prisma.MessageReadUncheckedCreateWithoutMessageInput>
}

export type MessageReadCreateManyMessageInputEnvelope = {
  data: Prisma.MessageReadCreateManyMessageInput | Prisma.MessageReadCreateManyMessageInput[]
  skipDuplicates?: boolean
}

export type MessageReadUpsertWithWhereUniqueWithoutMessageInput = {
  where: Prisma.MessageReadWhereUniqueInput
  update: Prisma.XOR<Prisma.MessageReadUpdateWithoutMessageInput, Prisma.MessageReadUncheckedUpdateWithoutMessageInput>
  create: Prisma.XOR<Prisma.MessageReadCreateWithoutMessageInput, Prisma.MessageReadUncheckedCreateWithoutMessageInput>
}

export type MessageReadUpdateWithWhereUniqueWithoutMessageInput = {
  where: Prisma.MessageReadWhereUniqueInput
  data: Prisma.XOR<Prisma.MessageReadUpdateWithoutMessageInput, Prisma.MessageReadUncheckedUpdateWithoutMessageInput>
}

export type MessageReadUpdateManyWithWhereWithoutMessageInput = {
  where: Prisma.MessageReadScalarWhereInput
  data: Prisma.XOR<Prisma.MessageReadUpdateManyMutationInput, Prisma.MessageReadUncheckedUpdateManyWithoutMessageInput>
}

export type MessageReadCreateManyUserInput = {
  messageId: string
  readAt?: Date | string
}

export type MessageReadUpdateWithoutUserInput = {
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.MessageUpdateOneRequiredWithoutReadByNestedInput
}

export type MessageReadUncheckedUpdateWithoutUserInput = {
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadUncheckedUpdateManyWithoutUserInput = {
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadCreateManyMessageInput = {
  userId: string
  readAt?: Date | string
}

export type MessageReadUpdateWithoutMessageInput = {
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutReadMessagesNestedInput
}

export type MessageReadUncheckedUpdateWithoutMessageInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadUncheckedUpdateManyWithoutMessageInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MessageReadSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  messageId?: boolean
  readAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageRead"]>

export type MessageReadSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  messageId?: boolean
  readAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageRead"]>

export type MessageReadSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  messageId?: boolean
  readAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageRead"]>

export type MessageReadSelectScalar = {
  userId?: boolean
  messageId?: boolean
  readAt?: boolean
}

export type MessageReadOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "messageId" | "readAt", ExtArgs["result"]["messageRead"]>
export type MessageReadInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}
export type MessageReadIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}
export type MessageReadIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
}

export type $MessageReadPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MessageRead"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    message: Prisma.$MessagePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    messageId: string
    readAt: Date
  }, ExtArgs["result"]["messageRead"]>
  composites: {}
}

export type MessageReadGetPayload<S extends boolean | null | undefined | MessageReadDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MessageReadPayload, S>

export type MessageReadCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MessageReadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MessageReadCountAggregateInputType | true
  }

export interface MessageReadDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageRead'], meta: { name: 'MessageRead' } }
  /**
   * Find zero or one MessageRead that matches the filter.
   * @param {MessageReadFindUniqueArgs} args - Arguments to find a MessageRead
   * @example
   * // Get one MessageRead
   * const messageRead = await prisma.messageRead.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MessageReadFindUniqueArgs>(args: Prisma.SelectSubset<T, MessageReadFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MessageReadClient<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MessageRead that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MessageReadFindUniqueOrThrowArgs} args - Arguments to find a MessageRead
   * @example
   * // Get one MessageRead
   * const messageRead = await prisma.messageRead.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MessageReadFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MessageReadFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MessageReadClient<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MessageRead that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadFindFirstArgs} args - Arguments to find a MessageRead
   * @example
   * // Get one MessageRead
   * const messageRead = await prisma.messageRead.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MessageReadFindFirstArgs>(args?: Prisma.SelectSubset<T, MessageReadFindFirstArgs<ExtArgs>>): Prisma.Prisma__MessageReadClient<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MessageRead that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadFindFirstOrThrowArgs} args - Arguments to find a MessageRead
   * @example
   * // Get one MessageRead
   * const messageRead = await prisma.messageRead.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MessageReadFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MessageReadFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MessageReadClient<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MessageReads that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MessageReads
   * const messageReads = await prisma.messageRead.findMany()
   * 
   * // Get first 10 MessageReads
   * const messageReads = await prisma.messageRead.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const messageReadWithUserIdOnly = await prisma.messageRead.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends MessageReadFindManyArgs>(args?: Prisma.SelectSubset<T, MessageReadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MessageRead.
   * @param {MessageReadCreateArgs} args - Arguments to create a MessageRead.
   * @example
   * // Create one MessageRead
   * const MessageRead = await prisma.messageRead.create({
   *   data: {
   *     // ... data to create a MessageRead
   *   }
   * })
   * 
   */
  create<T extends MessageReadCreateArgs>(args: Prisma.SelectSubset<T, MessageReadCreateArgs<ExtArgs>>): Prisma.Prisma__MessageReadClient<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MessageReads.
   * @param {MessageReadCreateManyArgs} args - Arguments to create many MessageReads.
   * @example
   * // Create many MessageReads
   * const messageRead = await prisma.messageRead.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MessageReadCreateManyArgs>(args?: Prisma.SelectSubset<T, MessageReadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MessageReads and returns the data saved in the database.
   * @param {MessageReadCreateManyAndReturnArgs} args - Arguments to create many MessageReads.
   * @example
   * // Create many MessageReads
   * const messageRead = await prisma.messageRead.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MessageReads and only return the `userId`
   * const messageReadWithUserIdOnly = await prisma.messageRead.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MessageReadCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MessageReadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MessageRead.
   * @param {MessageReadDeleteArgs} args - Arguments to delete one MessageRead.
   * @example
   * // Delete one MessageRead
   * const MessageRead = await prisma.messageRead.delete({
   *   where: {
   *     // ... filter to delete one MessageRead
   *   }
   * })
   * 
   */
  delete<T extends MessageReadDeleteArgs>(args: Prisma.SelectSubset<T, MessageReadDeleteArgs<ExtArgs>>): Prisma.Prisma__MessageReadClient<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MessageRead.
   * @param {MessageReadUpdateArgs} args - Arguments to update one MessageRead.
   * @example
   * // Update one MessageRead
   * const messageRead = await prisma.messageRead.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MessageReadUpdateArgs>(args: Prisma.SelectSubset<T, MessageReadUpdateArgs<ExtArgs>>): Prisma.Prisma__MessageReadClient<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MessageReads.
   * @param {MessageReadDeleteManyArgs} args - Arguments to filter MessageReads to delete.
   * @example
   * // Delete a few MessageReads
   * const { count } = await prisma.messageRead.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MessageReadDeleteManyArgs>(args?: Prisma.SelectSubset<T, MessageReadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MessageReads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MessageReads
   * const messageRead = await prisma.messageRead.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MessageReadUpdateManyArgs>(args: Prisma.SelectSubset<T, MessageReadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MessageReads and returns the data updated in the database.
   * @param {MessageReadUpdateManyAndReturnArgs} args - Arguments to update many MessageReads.
   * @example
   * // Update many MessageReads
   * const messageRead = await prisma.messageRead.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MessageReads and only return the `userId`
   * const messageReadWithUserIdOnly = await prisma.messageRead.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MessageReadUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MessageReadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MessageRead.
   * @param {MessageReadUpsertArgs} args - Arguments to update or create a MessageRead.
   * @example
   * // Update or create a MessageRead
   * const messageRead = await prisma.messageRead.upsert({
   *   create: {
   *     // ... data to create a MessageRead
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MessageRead we want to update
   *   }
   * })
   */
  upsert<T extends MessageReadUpsertArgs>(args: Prisma.SelectSubset<T, MessageReadUpsertArgs<ExtArgs>>): Prisma.Prisma__MessageReadClient<runtime.Types.Result.GetResult<Prisma.$MessageReadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MessageReads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadCountArgs} args - Arguments to filter MessageReads to count.
   * @example
   * // Count the number of MessageReads
   * const count = await prisma.messageRead.count({
   *   where: {
   *     // ... the filter for the MessageReads we want to count
   *   }
   * })
  **/
  count<T extends MessageReadCountArgs>(
    args?: Prisma.Subset<T, MessageReadCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MessageReadCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MessageRead.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MessageReadAggregateArgs>(args: Prisma.Subset<T, MessageReadAggregateArgs>): Prisma.PrismaPromise<GetMessageReadAggregateType<T>>

  /**
   * Group by MessageRead.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MessageReadGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MessageReadGroupByArgs['orderBy'] }
      : { orderBy?: MessageReadGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MessageReadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageReadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MessageRead model
 */
readonly fields: MessageReadFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MessageRead.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MessageReadClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  message<T extends Prisma.MessageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MessageDefaultArgs<ExtArgs>>): Prisma.Prisma__MessageClient<runtime.Types.Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MessageRead model
 */
export interface MessageReadFieldRefs {
  readonly userId: Prisma.FieldRef<"MessageRead", 'String'>
  readonly messageId: Prisma.FieldRef<"MessageRead", 'String'>
  readonly readAt: Prisma.FieldRef<"MessageRead", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MessageRead findUnique
 */
export type MessageReadFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * Filter, which MessageRead to fetch.
   */
  where: Prisma.MessageReadWhereUniqueInput
}

/**
 * MessageRead findUniqueOrThrow
 */
export type MessageReadFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * Filter, which MessageRead to fetch.
   */
  where: Prisma.MessageReadWhereUniqueInput
}

/**
 * MessageRead findFirst
 */
export type MessageReadFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * Filter, which MessageRead to fetch.
   */
  where?: Prisma.MessageReadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReads to fetch.
   */
  orderBy?: Prisma.MessageReadOrderByWithRelationInput | Prisma.MessageReadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MessageReads.
   */
  cursor?: Prisma.MessageReadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MessageReads.
   */
  distinct?: Prisma.MessageReadScalarFieldEnum | Prisma.MessageReadScalarFieldEnum[]
}

/**
 * MessageRead findFirstOrThrow
 */
export type MessageReadFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * Filter, which MessageRead to fetch.
   */
  where?: Prisma.MessageReadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReads to fetch.
   */
  orderBy?: Prisma.MessageReadOrderByWithRelationInput | Prisma.MessageReadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MessageReads.
   */
  cursor?: Prisma.MessageReadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MessageReads.
   */
  distinct?: Prisma.MessageReadScalarFieldEnum | Prisma.MessageReadScalarFieldEnum[]
}

/**
 * MessageRead findMany
 */
export type MessageReadFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * Filter, which MessageReads to fetch.
   */
  where?: Prisma.MessageReadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReads to fetch.
   */
  orderBy?: Prisma.MessageReadOrderByWithRelationInput | Prisma.MessageReadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MessageReads.
   */
  cursor?: Prisma.MessageReadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReads.
   */
  skip?: number
  distinct?: Prisma.MessageReadScalarFieldEnum | Prisma.MessageReadScalarFieldEnum[]
}

/**
 * MessageRead create
 */
export type MessageReadCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * The data needed to create a MessageRead.
   */
  data: Prisma.XOR<Prisma.MessageReadCreateInput, Prisma.MessageReadUncheckedCreateInput>
}

/**
 * MessageRead createMany
 */
export type MessageReadCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MessageReads.
   */
  data: Prisma.MessageReadCreateManyInput | Prisma.MessageReadCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MessageRead createManyAndReturn
 */
export type MessageReadCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * The data used to create many MessageReads.
   */
  data: Prisma.MessageReadCreateManyInput | Prisma.MessageReadCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MessageRead update
 */
export type MessageReadUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * The data needed to update a MessageRead.
   */
  data: Prisma.XOR<Prisma.MessageReadUpdateInput, Prisma.MessageReadUncheckedUpdateInput>
  /**
   * Choose, which MessageRead to update.
   */
  where: Prisma.MessageReadWhereUniqueInput
}

/**
 * MessageRead updateMany
 */
export type MessageReadUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MessageReads.
   */
  data: Prisma.XOR<Prisma.MessageReadUpdateManyMutationInput, Prisma.MessageReadUncheckedUpdateManyInput>
  /**
   * Filter which MessageReads to update
   */
  where?: Prisma.MessageReadWhereInput
  /**
   * Limit how many MessageReads to update.
   */
  limit?: number
}

/**
 * MessageRead updateManyAndReturn
 */
export type MessageReadUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * The data used to update MessageReads.
   */
  data: Prisma.XOR<Prisma.MessageReadUpdateManyMutationInput, Prisma.MessageReadUncheckedUpdateManyInput>
  /**
   * Filter which MessageReads to update
   */
  where?: Prisma.MessageReadWhereInput
  /**
   * Limit how many MessageReads to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MessageRead upsert
 */
export type MessageReadUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * The filter to search for the MessageRead to update in case it exists.
   */
  where: Prisma.MessageReadWhereUniqueInput
  /**
   * In case the MessageRead found by the `where` argument doesn't exist, create a new MessageRead with this data.
   */
  create: Prisma.XOR<Prisma.MessageReadCreateInput, Prisma.MessageReadUncheckedCreateInput>
  /**
   * In case the MessageRead was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MessageReadUpdateInput, Prisma.MessageReadUncheckedUpdateInput>
}

/**
 * MessageRead delete
 */
export type MessageReadDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
  /**
   * Filter which MessageRead to delete.
   */
  where: Prisma.MessageReadWhereUniqueInput
}

/**
 * MessageRead deleteMany
 */
export type MessageReadDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MessageReads to delete
   */
  where?: Prisma.MessageReadWhereInput
  /**
   * Limit how many MessageReads to delete.
   */
  limit?: number
}

/**
 * MessageRead without action
 */
export type MessageReadDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageRead
   */
  select?: Prisma.MessageReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageRead
   */
  omit?: Prisma.MessageReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadInclude<ExtArgs> | null
}
