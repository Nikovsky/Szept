
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserOnChat` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserOnChat
 * 
 */
export type UserOnChatModel = runtime.Types.Result.DefaultSelection<Prisma.$UserOnChatPayload>

export type AggregateUserOnChat = {
  _count: UserOnChatCountAggregateOutputType | null
  _min: UserOnChatMinAggregateOutputType | null
  _max: UserOnChatMaxAggregateOutputType | null
}

export type UserOnChatMinAggregateOutputType = {
  userId: string | null
  chatId: string | null
  role: string | null
  joinedAt: Date | null
}

export type UserOnChatMaxAggregateOutputType = {
  userId: string | null
  chatId: string | null
  role: string | null
  joinedAt: Date | null
}

export type UserOnChatCountAggregateOutputType = {
  userId: number
  chatId: number
  role: number
  joinedAt: number
  _all: number
}


export type UserOnChatMinAggregateInputType = {
  userId?: true
  chatId?: true
  role?: true
  joinedAt?: true
}

export type UserOnChatMaxAggregateInputType = {
  userId?: true
  chatId?: true
  role?: true
  joinedAt?: true
}

export type UserOnChatCountAggregateInputType = {
  userId?: true
  chatId?: true
  role?: true
  joinedAt?: true
  _all?: true
}

export type UserOnChatAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserOnChat to aggregate.
   */
  where?: Prisma.UserOnChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserOnChats to fetch.
   */
  orderBy?: Prisma.UserOnChatOrderByWithRelationInput | Prisma.UserOnChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserOnChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserOnChats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserOnChats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserOnChats
  **/
  _count?: true | UserOnChatCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserOnChatMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserOnChatMaxAggregateInputType
}

export type GetUserOnChatAggregateType<T extends UserOnChatAggregateArgs> = {
      [P in keyof T & keyof AggregateUserOnChat]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserOnChat[P]>
    : Prisma.GetScalarType<T[P], AggregateUserOnChat[P]>
}




export type UserOnChatGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserOnChatWhereInput
  orderBy?: Prisma.UserOnChatOrderByWithAggregationInput | Prisma.UserOnChatOrderByWithAggregationInput[]
  by: Prisma.UserOnChatScalarFieldEnum[] | Prisma.UserOnChatScalarFieldEnum
  having?: Prisma.UserOnChatScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserOnChatCountAggregateInputType | true
  _min?: UserOnChatMinAggregateInputType
  _max?: UserOnChatMaxAggregateInputType
}

export type UserOnChatGroupByOutputType = {
  userId: string
  chatId: string
  role: string
  joinedAt: Date
  _count: UserOnChatCountAggregateOutputType | null
  _min: UserOnChatMinAggregateOutputType | null
  _max: UserOnChatMaxAggregateOutputType | null
}

type GetUserOnChatGroupByPayload<T extends UserOnChatGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserOnChatGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserOnChatGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserOnChatGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserOnChatGroupByOutputType[P]>
      }
    >
  >



export type UserOnChatWhereInput = {
  AND?: Prisma.UserOnChatWhereInput | Prisma.UserOnChatWhereInput[]
  OR?: Prisma.UserOnChatWhereInput[]
  NOT?: Prisma.UserOnChatWhereInput | Prisma.UserOnChatWhereInput[]
  userId?: Prisma.StringFilter<"UserOnChat"> | string
  chatId?: Prisma.StringFilter<"UserOnChat"> | string
  role?: Prisma.StringFilter<"UserOnChat"> | string
  joinedAt?: Prisma.DateTimeFilter<"UserOnChat"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
}

export type UserOnChatOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  chat?: Prisma.ChatOrderByWithRelationInput
}

export type UserOnChatWhereUniqueInput = Prisma.AtLeast<{
  userId_chatId?: Prisma.UserOnChatUserIdChatIdCompoundUniqueInput
  AND?: Prisma.UserOnChatWhereInput | Prisma.UserOnChatWhereInput[]
  OR?: Prisma.UserOnChatWhereInput[]
  NOT?: Prisma.UserOnChatWhereInput | Prisma.UserOnChatWhereInput[]
  userId?: Prisma.StringFilter<"UserOnChat"> | string
  chatId?: Prisma.StringFilter<"UserOnChat"> | string
  role?: Prisma.StringFilter<"UserOnChat"> | string
  joinedAt?: Prisma.DateTimeFilter<"UserOnChat"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
}, "userId_chatId">

export type UserOnChatOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  _count?: Prisma.UserOnChatCountOrderByAggregateInput
  _max?: Prisma.UserOnChatMaxOrderByAggregateInput
  _min?: Prisma.UserOnChatMinOrderByAggregateInput
}

export type UserOnChatScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserOnChatScalarWhereWithAggregatesInput | Prisma.UserOnChatScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserOnChatScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserOnChatScalarWhereWithAggregatesInput | Prisma.UserOnChatScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserOnChat"> | string
  chatId?: Prisma.StringWithAggregatesFilter<"UserOnChat"> | string
  role?: Prisma.StringWithAggregatesFilter<"UserOnChat"> | string
  joinedAt?: Prisma.DateTimeWithAggregatesFilter<"UserOnChat"> | Date | string
}

export type UserOnChatCreateInput = {
  role?: string
  joinedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutChatsInput
  chat: Prisma.ChatCreateNestedOneWithoutMembersInput
}

export type UserOnChatUncheckedCreateInput = {
  userId: string
  chatId: string
  role?: string
  joinedAt?: Date | string
}

export type UserOnChatUpdateInput = {
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutChatsNestedInput
  chat?: Prisma.ChatUpdateOneRequiredWithoutMembersNestedInput
}

export type UserOnChatUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserOnChatCreateManyInput = {
  userId: string
  chatId: string
  role?: string
  joinedAt?: Date | string
}

export type UserOnChatUpdateManyMutationInput = {
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserOnChatUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserOnChatListRelationFilter = {
  every?: Prisma.UserOnChatWhereInput
  some?: Prisma.UserOnChatWhereInput
  none?: Prisma.UserOnChatWhereInput
}

export type UserOnChatOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserOnChatUserIdChatIdCompoundUniqueInput = {
  userId: string
  chatId: string
}

export type UserOnChatCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type UserOnChatMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type UserOnChatMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type UserOnChatCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserOnChatCreateWithoutUserInput, Prisma.UserOnChatUncheckedCreateWithoutUserInput> | Prisma.UserOnChatCreateWithoutUserInput[] | Prisma.UserOnChatUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserOnChatCreateOrConnectWithoutUserInput | Prisma.UserOnChatCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserOnChatCreateManyUserInputEnvelope
  connect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
}

export type UserOnChatUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserOnChatCreateWithoutUserInput, Prisma.UserOnChatUncheckedCreateWithoutUserInput> | Prisma.UserOnChatCreateWithoutUserInput[] | Prisma.UserOnChatUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserOnChatCreateOrConnectWithoutUserInput | Prisma.UserOnChatCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserOnChatCreateManyUserInputEnvelope
  connect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
}

export type UserOnChatUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserOnChatCreateWithoutUserInput, Prisma.UserOnChatUncheckedCreateWithoutUserInput> | Prisma.UserOnChatCreateWithoutUserInput[] | Prisma.UserOnChatUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserOnChatCreateOrConnectWithoutUserInput | Prisma.UserOnChatCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserOnChatUpsertWithWhereUniqueWithoutUserInput | Prisma.UserOnChatUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserOnChatCreateManyUserInputEnvelope
  set?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  disconnect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  delete?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  connect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  update?: Prisma.UserOnChatUpdateWithWhereUniqueWithoutUserInput | Prisma.UserOnChatUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserOnChatUpdateManyWithWhereWithoutUserInput | Prisma.UserOnChatUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserOnChatScalarWhereInput | Prisma.UserOnChatScalarWhereInput[]
}

export type UserOnChatUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserOnChatCreateWithoutUserInput, Prisma.UserOnChatUncheckedCreateWithoutUserInput> | Prisma.UserOnChatCreateWithoutUserInput[] | Prisma.UserOnChatUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserOnChatCreateOrConnectWithoutUserInput | Prisma.UserOnChatCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserOnChatUpsertWithWhereUniqueWithoutUserInput | Prisma.UserOnChatUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserOnChatCreateManyUserInputEnvelope
  set?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  disconnect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  delete?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  connect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  update?: Prisma.UserOnChatUpdateWithWhereUniqueWithoutUserInput | Prisma.UserOnChatUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserOnChatUpdateManyWithWhereWithoutUserInput | Prisma.UserOnChatUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserOnChatScalarWhereInput | Prisma.UserOnChatScalarWhereInput[]
}

export type UserOnChatCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.UserOnChatCreateWithoutChatInput, Prisma.UserOnChatUncheckedCreateWithoutChatInput> | Prisma.UserOnChatCreateWithoutChatInput[] | Prisma.UserOnChatUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.UserOnChatCreateOrConnectWithoutChatInput | Prisma.UserOnChatCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.UserOnChatCreateManyChatInputEnvelope
  connect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
}

export type UserOnChatUncheckedCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.UserOnChatCreateWithoutChatInput, Prisma.UserOnChatUncheckedCreateWithoutChatInput> | Prisma.UserOnChatCreateWithoutChatInput[] | Prisma.UserOnChatUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.UserOnChatCreateOrConnectWithoutChatInput | Prisma.UserOnChatCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.UserOnChatCreateManyChatInputEnvelope
  connect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
}

export type UserOnChatUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.UserOnChatCreateWithoutChatInput, Prisma.UserOnChatUncheckedCreateWithoutChatInput> | Prisma.UserOnChatCreateWithoutChatInput[] | Prisma.UserOnChatUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.UserOnChatCreateOrConnectWithoutChatInput | Prisma.UserOnChatCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.UserOnChatUpsertWithWhereUniqueWithoutChatInput | Prisma.UserOnChatUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.UserOnChatCreateManyChatInputEnvelope
  set?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  disconnect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  delete?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  connect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  update?: Prisma.UserOnChatUpdateWithWhereUniqueWithoutChatInput | Prisma.UserOnChatUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.UserOnChatUpdateManyWithWhereWithoutChatInput | Prisma.UserOnChatUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.UserOnChatScalarWhereInput | Prisma.UserOnChatScalarWhereInput[]
}

export type UserOnChatUncheckedUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.UserOnChatCreateWithoutChatInput, Prisma.UserOnChatUncheckedCreateWithoutChatInput> | Prisma.UserOnChatCreateWithoutChatInput[] | Prisma.UserOnChatUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.UserOnChatCreateOrConnectWithoutChatInput | Prisma.UserOnChatCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.UserOnChatUpsertWithWhereUniqueWithoutChatInput | Prisma.UserOnChatUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.UserOnChatCreateManyChatInputEnvelope
  set?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  disconnect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  delete?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  connect?: Prisma.UserOnChatWhereUniqueInput | Prisma.UserOnChatWhereUniqueInput[]
  update?: Prisma.UserOnChatUpdateWithWhereUniqueWithoutChatInput | Prisma.UserOnChatUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.UserOnChatUpdateManyWithWhereWithoutChatInput | Prisma.UserOnChatUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.UserOnChatScalarWhereInput | Prisma.UserOnChatScalarWhereInput[]
}

export type UserOnChatCreateWithoutUserInput = {
  role?: string
  joinedAt?: Date | string
  chat: Prisma.ChatCreateNestedOneWithoutMembersInput
}

export type UserOnChatUncheckedCreateWithoutUserInput = {
  chatId: string
  role?: string
  joinedAt?: Date | string
}

export type UserOnChatCreateOrConnectWithoutUserInput = {
  where: Prisma.UserOnChatWhereUniqueInput
  create: Prisma.XOR<Prisma.UserOnChatCreateWithoutUserInput, Prisma.UserOnChatUncheckedCreateWithoutUserInput>
}

export type UserOnChatCreateManyUserInputEnvelope = {
  data: Prisma.UserOnChatCreateManyUserInput | Prisma.UserOnChatCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserOnChatUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserOnChatWhereUniqueInput
  update: Prisma.XOR<Prisma.UserOnChatUpdateWithoutUserInput, Prisma.UserOnChatUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserOnChatCreateWithoutUserInput, Prisma.UserOnChatUncheckedCreateWithoutUserInput>
}

export type UserOnChatUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserOnChatWhereUniqueInput
  data: Prisma.XOR<Prisma.UserOnChatUpdateWithoutUserInput, Prisma.UserOnChatUncheckedUpdateWithoutUserInput>
}

export type UserOnChatUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserOnChatScalarWhereInput
  data: Prisma.XOR<Prisma.UserOnChatUpdateManyMutationInput, Prisma.UserOnChatUncheckedUpdateManyWithoutUserInput>
}

export type UserOnChatScalarWhereInput = {
  AND?: Prisma.UserOnChatScalarWhereInput | Prisma.UserOnChatScalarWhereInput[]
  OR?: Prisma.UserOnChatScalarWhereInput[]
  NOT?: Prisma.UserOnChatScalarWhereInput | Prisma.UserOnChatScalarWhereInput[]
  userId?: Prisma.StringFilter<"UserOnChat"> | string
  chatId?: Prisma.StringFilter<"UserOnChat"> | string
  role?: Prisma.StringFilter<"UserOnChat"> | string
  joinedAt?: Prisma.DateTimeFilter<"UserOnChat"> | Date | string
}

export type UserOnChatCreateWithoutChatInput = {
  role?: string
  joinedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutChatsInput
}

export type UserOnChatUncheckedCreateWithoutChatInput = {
  userId: string
  role?: string
  joinedAt?: Date | string
}

export type UserOnChatCreateOrConnectWithoutChatInput = {
  where: Prisma.UserOnChatWhereUniqueInput
  create: Prisma.XOR<Prisma.UserOnChatCreateWithoutChatInput, Prisma.UserOnChatUncheckedCreateWithoutChatInput>
}

export type UserOnChatCreateManyChatInputEnvelope = {
  data: Prisma.UserOnChatCreateManyChatInput | Prisma.UserOnChatCreateManyChatInput[]
  skipDuplicates?: boolean
}

export type UserOnChatUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.UserOnChatWhereUniqueInput
  update: Prisma.XOR<Prisma.UserOnChatUpdateWithoutChatInput, Prisma.UserOnChatUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.UserOnChatCreateWithoutChatInput, Prisma.UserOnChatUncheckedCreateWithoutChatInput>
}

export type UserOnChatUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.UserOnChatWhereUniqueInput
  data: Prisma.XOR<Prisma.UserOnChatUpdateWithoutChatInput, Prisma.UserOnChatUncheckedUpdateWithoutChatInput>
}

export type UserOnChatUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.UserOnChatScalarWhereInput
  data: Prisma.XOR<Prisma.UserOnChatUpdateManyMutationInput, Prisma.UserOnChatUncheckedUpdateManyWithoutChatInput>
}

export type UserOnChatCreateManyUserInput = {
  chatId: string
  role?: string
  joinedAt?: Date | string
}

export type UserOnChatUpdateWithoutUserInput = {
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutMembersNestedInput
}

export type UserOnChatUncheckedUpdateWithoutUserInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserOnChatUncheckedUpdateManyWithoutUserInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserOnChatCreateManyChatInput = {
  userId: string
  role?: string
  joinedAt?: Date | string
}

export type UserOnChatUpdateWithoutChatInput = {
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutChatsNestedInput
}

export type UserOnChatUncheckedUpdateWithoutChatInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserOnChatUncheckedUpdateManyWithoutChatInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserOnChatSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  role?: boolean
  joinedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userOnChat"]>

export type UserOnChatSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  role?: boolean
  joinedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userOnChat"]>

export type UserOnChatSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  role?: boolean
  joinedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userOnChat"]>

export type UserOnChatSelectScalar = {
  userId?: boolean
  chatId?: boolean
  role?: boolean
  joinedAt?: boolean
}

export type UserOnChatOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "chatId" | "role" | "joinedAt", ExtArgs["result"]["userOnChat"]>
export type UserOnChatInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type UserOnChatIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type UserOnChatIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}

export type $UserOnChatPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserOnChat"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    chat: Prisma.$ChatPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    chatId: string
    role: string
    joinedAt: Date
  }, ExtArgs["result"]["userOnChat"]>
  composites: {}
}

export type UserOnChatGetPayload<S extends boolean | null | undefined | UserOnChatDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload, S>

export type UserOnChatCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserOnChatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserOnChatCountAggregateInputType | true
  }

export interface UserOnChatDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserOnChat'], meta: { name: 'UserOnChat' } }
  /**
   * Find zero or one UserOnChat that matches the filter.
   * @param {UserOnChatFindUniqueArgs} args - Arguments to find a UserOnChat
   * @example
   * // Get one UserOnChat
   * const userOnChat = await prisma.userOnChat.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserOnChatFindUniqueArgs>(args: Prisma.SelectSubset<T, UserOnChatFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserOnChatClient<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserOnChat that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserOnChatFindUniqueOrThrowArgs} args - Arguments to find a UserOnChat
   * @example
   * // Get one UserOnChat
   * const userOnChat = await prisma.userOnChat.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserOnChatFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserOnChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserOnChatClient<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserOnChat that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserOnChatFindFirstArgs} args - Arguments to find a UserOnChat
   * @example
   * // Get one UserOnChat
   * const userOnChat = await prisma.userOnChat.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserOnChatFindFirstArgs>(args?: Prisma.SelectSubset<T, UserOnChatFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserOnChatClient<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserOnChat that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserOnChatFindFirstOrThrowArgs} args - Arguments to find a UserOnChat
   * @example
   * // Get one UserOnChat
   * const userOnChat = await prisma.userOnChat.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserOnChatFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserOnChatFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserOnChatClient<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserOnChats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserOnChatFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserOnChats
   * const userOnChats = await prisma.userOnChat.findMany()
   * 
   * // Get first 10 UserOnChats
   * const userOnChats = await prisma.userOnChat.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userOnChatWithUserIdOnly = await prisma.userOnChat.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserOnChatFindManyArgs>(args?: Prisma.SelectSubset<T, UserOnChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserOnChat.
   * @param {UserOnChatCreateArgs} args - Arguments to create a UserOnChat.
   * @example
   * // Create one UserOnChat
   * const UserOnChat = await prisma.userOnChat.create({
   *   data: {
   *     // ... data to create a UserOnChat
   *   }
   * })
   * 
   */
  create<T extends UserOnChatCreateArgs>(args: Prisma.SelectSubset<T, UserOnChatCreateArgs<ExtArgs>>): Prisma.Prisma__UserOnChatClient<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserOnChats.
   * @param {UserOnChatCreateManyArgs} args - Arguments to create many UserOnChats.
   * @example
   * // Create many UserOnChats
   * const userOnChat = await prisma.userOnChat.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserOnChatCreateManyArgs>(args?: Prisma.SelectSubset<T, UserOnChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserOnChats and returns the data saved in the database.
   * @param {UserOnChatCreateManyAndReturnArgs} args - Arguments to create many UserOnChats.
   * @example
   * // Create many UserOnChats
   * const userOnChat = await prisma.userOnChat.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserOnChats and only return the `userId`
   * const userOnChatWithUserIdOnly = await prisma.userOnChat.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserOnChatCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserOnChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserOnChat.
   * @param {UserOnChatDeleteArgs} args - Arguments to delete one UserOnChat.
   * @example
   * // Delete one UserOnChat
   * const UserOnChat = await prisma.userOnChat.delete({
   *   where: {
   *     // ... filter to delete one UserOnChat
   *   }
   * })
   * 
   */
  delete<T extends UserOnChatDeleteArgs>(args: Prisma.SelectSubset<T, UserOnChatDeleteArgs<ExtArgs>>): Prisma.Prisma__UserOnChatClient<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserOnChat.
   * @param {UserOnChatUpdateArgs} args - Arguments to update one UserOnChat.
   * @example
   * // Update one UserOnChat
   * const userOnChat = await prisma.userOnChat.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserOnChatUpdateArgs>(args: Prisma.SelectSubset<T, UserOnChatUpdateArgs<ExtArgs>>): Prisma.Prisma__UserOnChatClient<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserOnChats.
   * @param {UserOnChatDeleteManyArgs} args - Arguments to filter UserOnChats to delete.
   * @example
   * // Delete a few UserOnChats
   * const { count } = await prisma.userOnChat.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserOnChatDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserOnChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserOnChats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserOnChatUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserOnChats
   * const userOnChat = await prisma.userOnChat.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserOnChatUpdateManyArgs>(args: Prisma.SelectSubset<T, UserOnChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserOnChats and returns the data updated in the database.
   * @param {UserOnChatUpdateManyAndReturnArgs} args - Arguments to update many UserOnChats.
   * @example
   * // Update many UserOnChats
   * const userOnChat = await prisma.userOnChat.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserOnChats and only return the `userId`
   * const userOnChatWithUserIdOnly = await prisma.userOnChat.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserOnChatUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserOnChatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserOnChat.
   * @param {UserOnChatUpsertArgs} args - Arguments to update or create a UserOnChat.
   * @example
   * // Update or create a UserOnChat
   * const userOnChat = await prisma.userOnChat.upsert({
   *   create: {
   *     // ... data to create a UserOnChat
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserOnChat we want to update
   *   }
   * })
   */
  upsert<T extends UserOnChatUpsertArgs>(args: Prisma.SelectSubset<T, UserOnChatUpsertArgs<ExtArgs>>): Prisma.Prisma__UserOnChatClient<runtime.Types.Result.GetResult<Prisma.$UserOnChatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserOnChats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserOnChatCountArgs} args - Arguments to filter UserOnChats to count.
   * @example
   * // Count the number of UserOnChats
   * const count = await prisma.userOnChat.count({
   *   where: {
   *     // ... the filter for the UserOnChats we want to count
   *   }
   * })
  **/
  count<T extends UserOnChatCountArgs>(
    args?: Prisma.Subset<T, UserOnChatCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserOnChatCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserOnChat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserOnChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserOnChatAggregateArgs>(args: Prisma.Subset<T, UserOnChatAggregateArgs>): Prisma.PrismaPromise<GetUserOnChatAggregateType<T>>

  /**
   * Group by UserOnChat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserOnChatGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserOnChatGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserOnChatGroupByArgs['orderBy'] }
      : { orderBy?: UserOnChatGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserOnChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserOnChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserOnChat model
 */
readonly fields: UserOnChatFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserOnChat.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserOnChatClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  chat<T extends Prisma.ChatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserOnChat model
 */
export interface UserOnChatFieldRefs {
  readonly userId: Prisma.FieldRef<"UserOnChat", 'String'>
  readonly chatId: Prisma.FieldRef<"UserOnChat", 'String'>
  readonly role: Prisma.FieldRef<"UserOnChat", 'String'>
  readonly joinedAt: Prisma.FieldRef<"UserOnChat", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserOnChat findUnique
 */
export type UserOnChatFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * Filter, which UserOnChat to fetch.
   */
  where: Prisma.UserOnChatWhereUniqueInput
}

/**
 * UserOnChat findUniqueOrThrow
 */
export type UserOnChatFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * Filter, which UserOnChat to fetch.
   */
  where: Prisma.UserOnChatWhereUniqueInput
}

/**
 * UserOnChat findFirst
 */
export type UserOnChatFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * Filter, which UserOnChat to fetch.
   */
  where?: Prisma.UserOnChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserOnChats to fetch.
   */
  orderBy?: Prisma.UserOnChatOrderByWithRelationInput | Prisma.UserOnChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserOnChats.
   */
  cursor?: Prisma.UserOnChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserOnChats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserOnChats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserOnChats.
   */
  distinct?: Prisma.UserOnChatScalarFieldEnum | Prisma.UserOnChatScalarFieldEnum[]
}

/**
 * UserOnChat findFirstOrThrow
 */
export type UserOnChatFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * Filter, which UserOnChat to fetch.
   */
  where?: Prisma.UserOnChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserOnChats to fetch.
   */
  orderBy?: Prisma.UserOnChatOrderByWithRelationInput | Prisma.UserOnChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserOnChats.
   */
  cursor?: Prisma.UserOnChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserOnChats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserOnChats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserOnChats.
   */
  distinct?: Prisma.UserOnChatScalarFieldEnum | Prisma.UserOnChatScalarFieldEnum[]
}

/**
 * UserOnChat findMany
 */
export type UserOnChatFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * Filter, which UserOnChats to fetch.
   */
  where?: Prisma.UserOnChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserOnChats to fetch.
   */
  orderBy?: Prisma.UserOnChatOrderByWithRelationInput | Prisma.UserOnChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserOnChats.
   */
  cursor?: Prisma.UserOnChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserOnChats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserOnChats.
   */
  skip?: number
  distinct?: Prisma.UserOnChatScalarFieldEnum | Prisma.UserOnChatScalarFieldEnum[]
}

/**
 * UserOnChat create
 */
export type UserOnChatCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * The data needed to create a UserOnChat.
   */
  data: Prisma.XOR<Prisma.UserOnChatCreateInput, Prisma.UserOnChatUncheckedCreateInput>
}

/**
 * UserOnChat createMany
 */
export type UserOnChatCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserOnChats.
   */
  data: Prisma.UserOnChatCreateManyInput | Prisma.UserOnChatCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserOnChat createManyAndReturn
 */
export type UserOnChatCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * The data used to create many UserOnChats.
   */
  data: Prisma.UserOnChatCreateManyInput | Prisma.UserOnChatCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserOnChat update
 */
export type UserOnChatUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * The data needed to update a UserOnChat.
   */
  data: Prisma.XOR<Prisma.UserOnChatUpdateInput, Prisma.UserOnChatUncheckedUpdateInput>
  /**
   * Choose, which UserOnChat to update.
   */
  where: Prisma.UserOnChatWhereUniqueInput
}

/**
 * UserOnChat updateMany
 */
export type UserOnChatUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserOnChats.
   */
  data: Prisma.XOR<Prisma.UserOnChatUpdateManyMutationInput, Prisma.UserOnChatUncheckedUpdateManyInput>
  /**
   * Filter which UserOnChats to update
   */
  where?: Prisma.UserOnChatWhereInput
  /**
   * Limit how many UserOnChats to update.
   */
  limit?: number
}

/**
 * UserOnChat updateManyAndReturn
 */
export type UserOnChatUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * The data used to update UserOnChats.
   */
  data: Prisma.XOR<Prisma.UserOnChatUpdateManyMutationInput, Prisma.UserOnChatUncheckedUpdateManyInput>
  /**
   * Filter which UserOnChats to update
   */
  where?: Prisma.UserOnChatWhereInput
  /**
   * Limit how many UserOnChats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserOnChat upsert
 */
export type UserOnChatUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * The filter to search for the UserOnChat to update in case it exists.
   */
  where: Prisma.UserOnChatWhereUniqueInput
  /**
   * In case the UserOnChat found by the `where` argument doesn't exist, create a new UserOnChat with this data.
   */
  create: Prisma.XOR<Prisma.UserOnChatCreateInput, Prisma.UserOnChatUncheckedCreateInput>
  /**
   * In case the UserOnChat was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserOnChatUpdateInput, Prisma.UserOnChatUncheckedUpdateInput>
}

/**
 * UserOnChat delete
 */
export type UserOnChatDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
  /**
   * Filter which UserOnChat to delete.
   */
  where: Prisma.UserOnChatWhereUniqueInput
}

/**
 * UserOnChat deleteMany
 */
export type UserOnChatDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserOnChats to delete
   */
  where?: Prisma.UserOnChatWhereInput
  /**
   * Limit how many UserOnChats to delete.
   */
  limit?: number
}

/**
 * UserOnChat without action
 */
export type UserOnChatDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserOnChat
   */
  select?: Prisma.UserOnChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserOnChat
   */
  omit?: Prisma.UserOnChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserOnChatInclude<ExtArgs> | null
}
