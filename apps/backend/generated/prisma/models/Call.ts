
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Call` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Call
 * 
 */
export type CallModel = runtime.Types.Result.DefaultSelection<Prisma.$CallPayload>

export type AggregateCall = {
  _count: CallCountAggregateOutputType | null
  _avg: CallAvgAggregateOutputType | null
  _sum: CallSumAggregateOutputType | null
  _min: CallMinAggregateOutputType | null
  _max: CallMaxAggregateOutputType | null
}

export type CallAvgAggregateOutputType = {
  duration: number | null
}

export type CallSumAggregateOutputType = {
  duration: number | null
}

export type CallMinAggregateOutputType = {
  id: string | null
  chatId: string | null
  callerId: string | null
  calleeId: string | null
  startedAt: Date | null
  endedAt: Date | null
  duration: number | null
  status: string | null
}

export type CallMaxAggregateOutputType = {
  id: string | null
  chatId: string | null
  callerId: string | null
  calleeId: string | null
  startedAt: Date | null
  endedAt: Date | null
  duration: number | null
  status: string | null
}

export type CallCountAggregateOutputType = {
  id: number
  chatId: number
  callerId: number
  calleeId: number
  startedAt: number
  endedAt: number
  duration: number
  status: number
  _all: number
}


export type CallAvgAggregateInputType = {
  duration?: true
}

export type CallSumAggregateInputType = {
  duration?: true
}

export type CallMinAggregateInputType = {
  id?: true
  chatId?: true
  callerId?: true
  calleeId?: true
  startedAt?: true
  endedAt?: true
  duration?: true
  status?: true
}

export type CallMaxAggregateInputType = {
  id?: true
  chatId?: true
  callerId?: true
  calleeId?: true
  startedAt?: true
  endedAt?: true
  duration?: true
  status?: true
}

export type CallCountAggregateInputType = {
  id?: true
  chatId?: true
  callerId?: true
  calleeId?: true
  startedAt?: true
  endedAt?: true
  duration?: true
  status?: true
  _all?: true
}

export type CallAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Call to aggregate.
   */
  where?: Prisma.CallWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Calls to fetch.
   */
  orderBy?: Prisma.CallOrderByWithRelationInput | Prisma.CallOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CallWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Calls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Calls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Calls
  **/
  _count?: true | CallCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CallAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CallSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CallMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CallMaxAggregateInputType
}

export type GetCallAggregateType<T extends CallAggregateArgs> = {
      [P in keyof T & keyof AggregateCall]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCall[P]>
    : Prisma.GetScalarType<T[P], AggregateCall[P]>
}




export type CallGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CallWhereInput
  orderBy?: Prisma.CallOrderByWithAggregationInput | Prisma.CallOrderByWithAggregationInput[]
  by: Prisma.CallScalarFieldEnum[] | Prisma.CallScalarFieldEnum
  having?: Prisma.CallScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CallCountAggregateInputType | true
  _avg?: CallAvgAggregateInputType
  _sum?: CallSumAggregateInputType
  _min?: CallMinAggregateInputType
  _max?: CallMaxAggregateInputType
}

export type CallGroupByOutputType = {
  id: string
  chatId: string
  callerId: string
  calleeId: string
  startedAt: Date
  endedAt: Date | null
  duration: number | null
  status: string
  _count: CallCountAggregateOutputType | null
  _avg: CallAvgAggregateOutputType | null
  _sum: CallSumAggregateOutputType | null
  _min: CallMinAggregateOutputType | null
  _max: CallMaxAggregateOutputType | null
}

type GetCallGroupByPayload<T extends CallGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CallGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CallGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CallGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CallGroupByOutputType[P]>
      }
    >
  >



export type CallWhereInput = {
  AND?: Prisma.CallWhereInput | Prisma.CallWhereInput[]
  OR?: Prisma.CallWhereInput[]
  NOT?: Prisma.CallWhereInput | Prisma.CallWhereInput[]
  id?: Prisma.StringFilter<"Call"> | string
  chatId?: Prisma.StringFilter<"Call"> | string
  callerId?: Prisma.StringFilter<"Call"> | string
  calleeId?: Prisma.StringFilter<"Call"> | string
  startedAt?: Prisma.DateTimeFilter<"Call"> | Date | string
  endedAt?: Prisma.DateTimeNullableFilter<"Call"> | Date | string | null
  duration?: Prisma.IntNullableFilter<"Call"> | number | null
  status?: Prisma.StringFilter<"Call"> | string
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
  caller?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  callee?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type CallOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  callerId?: Prisma.SortOrder
  calleeId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  chat?: Prisma.ChatOrderByWithRelationInput
  caller?: Prisma.UserOrderByWithRelationInput
  callee?: Prisma.UserOrderByWithRelationInput
}

export type CallWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CallWhereInput | Prisma.CallWhereInput[]
  OR?: Prisma.CallWhereInput[]
  NOT?: Prisma.CallWhereInput | Prisma.CallWhereInput[]
  chatId?: Prisma.StringFilter<"Call"> | string
  callerId?: Prisma.StringFilter<"Call"> | string
  calleeId?: Prisma.StringFilter<"Call"> | string
  startedAt?: Prisma.DateTimeFilter<"Call"> | Date | string
  endedAt?: Prisma.DateTimeNullableFilter<"Call"> | Date | string | null
  duration?: Prisma.IntNullableFilter<"Call"> | number | null
  status?: Prisma.StringFilter<"Call"> | string
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
  caller?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  callee?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type CallOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  callerId?: Prisma.SortOrder
  calleeId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.CallCountOrderByAggregateInput
  _avg?: Prisma.CallAvgOrderByAggregateInput
  _max?: Prisma.CallMaxOrderByAggregateInput
  _min?: Prisma.CallMinOrderByAggregateInput
  _sum?: Prisma.CallSumOrderByAggregateInput
}

export type CallScalarWhereWithAggregatesInput = {
  AND?: Prisma.CallScalarWhereWithAggregatesInput | Prisma.CallScalarWhereWithAggregatesInput[]
  OR?: Prisma.CallScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CallScalarWhereWithAggregatesInput | Prisma.CallScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Call"> | string
  chatId?: Prisma.StringWithAggregatesFilter<"Call"> | string
  callerId?: Prisma.StringWithAggregatesFilter<"Call"> | string
  calleeId?: Prisma.StringWithAggregatesFilter<"Call"> | string
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"Call"> | Date | string
  endedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Call"> | Date | string | null
  duration?: Prisma.IntNullableWithAggregatesFilter<"Call"> | number | null
  status?: Prisma.StringWithAggregatesFilter<"Call"> | string
}

export type CallCreateInput = {
  id?: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
  chat: Prisma.ChatCreateNestedOneWithoutCallsInput
  caller: Prisma.UserCreateNestedOneWithoutCallsMadeInput
  callee: Prisma.UserCreateNestedOneWithoutCallsReceivedInput
}

export type CallUncheckedCreateInput = {
  id?: string
  chatId: string
  callerId: string
  calleeId: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
}

export type CallUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutCallsNestedInput
  caller?: Prisma.UserUpdateOneRequiredWithoutCallsMadeNestedInput
  callee?: Prisma.UserUpdateOneRequiredWithoutCallsReceivedNestedInput
}

export type CallUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  callerId?: Prisma.StringFieldUpdateOperationsInput | string
  calleeId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CallCreateManyInput = {
  id?: string
  chatId: string
  callerId: string
  calleeId: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
}

export type CallUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CallUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  callerId?: Prisma.StringFieldUpdateOperationsInput | string
  calleeId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CallListRelationFilter = {
  every?: Prisma.CallWhereInput
  some?: Prisma.CallWhereInput
  none?: Prisma.CallWhereInput
}

export type CallOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CallCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  callerId?: Prisma.SortOrder
  calleeId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type CallAvgOrderByAggregateInput = {
  duration?: Prisma.SortOrder
}

export type CallMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  callerId?: Prisma.SortOrder
  calleeId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type CallMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  callerId?: Prisma.SortOrder
  calleeId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type CallSumOrderByAggregateInput = {
  duration?: Prisma.SortOrder
}

export type CallCreateNestedManyWithoutCallerInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutCallerInput, Prisma.CallUncheckedCreateWithoutCallerInput> | Prisma.CallCreateWithoutCallerInput[] | Prisma.CallUncheckedCreateWithoutCallerInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutCallerInput | Prisma.CallCreateOrConnectWithoutCallerInput[]
  createMany?: Prisma.CallCreateManyCallerInputEnvelope
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
}

export type CallCreateNestedManyWithoutCalleeInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutCalleeInput, Prisma.CallUncheckedCreateWithoutCalleeInput> | Prisma.CallCreateWithoutCalleeInput[] | Prisma.CallUncheckedCreateWithoutCalleeInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutCalleeInput | Prisma.CallCreateOrConnectWithoutCalleeInput[]
  createMany?: Prisma.CallCreateManyCalleeInputEnvelope
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
}

export type CallUncheckedCreateNestedManyWithoutCallerInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutCallerInput, Prisma.CallUncheckedCreateWithoutCallerInput> | Prisma.CallCreateWithoutCallerInput[] | Prisma.CallUncheckedCreateWithoutCallerInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutCallerInput | Prisma.CallCreateOrConnectWithoutCallerInput[]
  createMany?: Prisma.CallCreateManyCallerInputEnvelope
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
}

export type CallUncheckedCreateNestedManyWithoutCalleeInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutCalleeInput, Prisma.CallUncheckedCreateWithoutCalleeInput> | Prisma.CallCreateWithoutCalleeInput[] | Prisma.CallUncheckedCreateWithoutCalleeInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutCalleeInput | Prisma.CallCreateOrConnectWithoutCalleeInput[]
  createMany?: Prisma.CallCreateManyCalleeInputEnvelope
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
}

export type CallUpdateManyWithoutCallerNestedInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutCallerInput, Prisma.CallUncheckedCreateWithoutCallerInput> | Prisma.CallCreateWithoutCallerInput[] | Prisma.CallUncheckedCreateWithoutCallerInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutCallerInput | Prisma.CallCreateOrConnectWithoutCallerInput[]
  upsert?: Prisma.CallUpsertWithWhereUniqueWithoutCallerInput | Prisma.CallUpsertWithWhereUniqueWithoutCallerInput[]
  createMany?: Prisma.CallCreateManyCallerInputEnvelope
  set?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  disconnect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  delete?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  update?: Prisma.CallUpdateWithWhereUniqueWithoutCallerInput | Prisma.CallUpdateWithWhereUniqueWithoutCallerInput[]
  updateMany?: Prisma.CallUpdateManyWithWhereWithoutCallerInput | Prisma.CallUpdateManyWithWhereWithoutCallerInput[]
  deleteMany?: Prisma.CallScalarWhereInput | Prisma.CallScalarWhereInput[]
}

export type CallUpdateManyWithoutCalleeNestedInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutCalleeInput, Prisma.CallUncheckedCreateWithoutCalleeInput> | Prisma.CallCreateWithoutCalleeInput[] | Prisma.CallUncheckedCreateWithoutCalleeInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutCalleeInput | Prisma.CallCreateOrConnectWithoutCalleeInput[]
  upsert?: Prisma.CallUpsertWithWhereUniqueWithoutCalleeInput | Prisma.CallUpsertWithWhereUniqueWithoutCalleeInput[]
  createMany?: Prisma.CallCreateManyCalleeInputEnvelope
  set?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  disconnect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  delete?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  update?: Prisma.CallUpdateWithWhereUniqueWithoutCalleeInput | Prisma.CallUpdateWithWhereUniqueWithoutCalleeInput[]
  updateMany?: Prisma.CallUpdateManyWithWhereWithoutCalleeInput | Prisma.CallUpdateManyWithWhereWithoutCalleeInput[]
  deleteMany?: Prisma.CallScalarWhereInput | Prisma.CallScalarWhereInput[]
}

export type CallUncheckedUpdateManyWithoutCallerNestedInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutCallerInput, Prisma.CallUncheckedCreateWithoutCallerInput> | Prisma.CallCreateWithoutCallerInput[] | Prisma.CallUncheckedCreateWithoutCallerInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutCallerInput | Prisma.CallCreateOrConnectWithoutCallerInput[]
  upsert?: Prisma.CallUpsertWithWhereUniqueWithoutCallerInput | Prisma.CallUpsertWithWhereUniqueWithoutCallerInput[]
  createMany?: Prisma.CallCreateManyCallerInputEnvelope
  set?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  disconnect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  delete?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  update?: Prisma.CallUpdateWithWhereUniqueWithoutCallerInput | Prisma.CallUpdateWithWhereUniqueWithoutCallerInput[]
  updateMany?: Prisma.CallUpdateManyWithWhereWithoutCallerInput | Prisma.CallUpdateManyWithWhereWithoutCallerInput[]
  deleteMany?: Prisma.CallScalarWhereInput | Prisma.CallScalarWhereInput[]
}

export type CallUncheckedUpdateManyWithoutCalleeNestedInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutCalleeInput, Prisma.CallUncheckedCreateWithoutCalleeInput> | Prisma.CallCreateWithoutCalleeInput[] | Prisma.CallUncheckedCreateWithoutCalleeInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutCalleeInput | Prisma.CallCreateOrConnectWithoutCalleeInput[]
  upsert?: Prisma.CallUpsertWithWhereUniqueWithoutCalleeInput | Prisma.CallUpsertWithWhereUniqueWithoutCalleeInput[]
  createMany?: Prisma.CallCreateManyCalleeInputEnvelope
  set?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  disconnect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  delete?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  update?: Prisma.CallUpdateWithWhereUniqueWithoutCalleeInput | Prisma.CallUpdateWithWhereUniqueWithoutCalleeInput[]
  updateMany?: Prisma.CallUpdateManyWithWhereWithoutCalleeInput | Prisma.CallUpdateManyWithWhereWithoutCalleeInput[]
  deleteMany?: Prisma.CallScalarWhereInput | Prisma.CallScalarWhereInput[]
}

export type CallCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutChatInput, Prisma.CallUncheckedCreateWithoutChatInput> | Prisma.CallCreateWithoutChatInput[] | Prisma.CallUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutChatInput | Prisma.CallCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.CallCreateManyChatInputEnvelope
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
}

export type CallUncheckedCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutChatInput, Prisma.CallUncheckedCreateWithoutChatInput> | Prisma.CallCreateWithoutChatInput[] | Prisma.CallUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutChatInput | Prisma.CallCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.CallCreateManyChatInputEnvelope
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
}

export type CallUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutChatInput, Prisma.CallUncheckedCreateWithoutChatInput> | Prisma.CallCreateWithoutChatInput[] | Prisma.CallUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutChatInput | Prisma.CallCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.CallUpsertWithWhereUniqueWithoutChatInput | Prisma.CallUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.CallCreateManyChatInputEnvelope
  set?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  disconnect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  delete?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  update?: Prisma.CallUpdateWithWhereUniqueWithoutChatInput | Prisma.CallUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.CallUpdateManyWithWhereWithoutChatInput | Prisma.CallUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.CallScalarWhereInput | Prisma.CallScalarWhereInput[]
}

export type CallUncheckedUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.CallCreateWithoutChatInput, Prisma.CallUncheckedCreateWithoutChatInput> | Prisma.CallCreateWithoutChatInput[] | Prisma.CallUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.CallCreateOrConnectWithoutChatInput | Prisma.CallCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.CallUpsertWithWhereUniqueWithoutChatInput | Prisma.CallUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.CallCreateManyChatInputEnvelope
  set?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  disconnect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  delete?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  connect?: Prisma.CallWhereUniqueInput | Prisma.CallWhereUniqueInput[]
  update?: Prisma.CallUpdateWithWhereUniqueWithoutChatInput | Prisma.CallUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.CallUpdateManyWithWhereWithoutChatInput | Prisma.CallUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.CallScalarWhereInput | Prisma.CallScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type CallCreateWithoutCallerInput = {
  id?: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
  chat: Prisma.ChatCreateNestedOneWithoutCallsInput
  callee: Prisma.UserCreateNestedOneWithoutCallsReceivedInput
}

export type CallUncheckedCreateWithoutCallerInput = {
  id?: string
  chatId: string
  calleeId: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
}

export type CallCreateOrConnectWithoutCallerInput = {
  where: Prisma.CallWhereUniqueInput
  create: Prisma.XOR<Prisma.CallCreateWithoutCallerInput, Prisma.CallUncheckedCreateWithoutCallerInput>
}

export type CallCreateManyCallerInputEnvelope = {
  data: Prisma.CallCreateManyCallerInput | Prisma.CallCreateManyCallerInput[]
  skipDuplicates?: boolean
}

export type CallCreateWithoutCalleeInput = {
  id?: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
  chat: Prisma.ChatCreateNestedOneWithoutCallsInput
  caller: Prisma.UserCreateNestedOneWithoutCallsMadeInput
}

export type CallUncheckedCreateWithoutCalleeInput = {
  id?: string
  chatId: string
  callerId: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
}

export type CallCreateOrConnectWithoutCalleeInput = {
  where: Prisma.CallWhereUniqueInput
  create: Prisma.XOR<Prisma.CallCreateWithoutCalleeInput, Prisma.CallUncheckedCreateWithoutCalleeInput>
}

export type CallCreateManyCalleeInputEnvelope = {
  data: Prisma.CallCreateManyCalleeInput | Prisma.CallCreateManyCalleeInput[]
  skipDuplicates?: boolean
}

export type CallUpsertWithWhereUniqueWithoutCallerInput = {
  where: Prisma.CallWhereUniqueInput
  update: Prisma.XOR<Prisma.CallUpdateWithoutCallerInput, Prisma.CallUncheckedUpdateWithoutCallerInput>
  create: Prisma.XOR<Prisma.CallCreateWithoutCallerInput, Prisma.CallUncheckedCreateWithoutCallerInput>
}

export type CallUpdateWithWhereUniqueWithoutCallerInput = {
  where: Prisma.CallWhereUniqueInput
  data: Prisma.XOR<Prisma.CallUpdateWithoutCallerInput, Prisma.CallUncheckedUpdateWithoutCallerInput>
}

export type CallUpdateManyWithWhereWithoutCallerInput = {
  where: Prisma.CallScalarWhereInput
  data: Prisma.XOR<Prisma.CallUpdateManyMutationInput, Prisma.CallUncheckedUpdateManyWithoutCallerInput>
}

export type CallScalarWhereInput = {
  AND?: Prisma.CallScalarWhereInput | Prisma.CallScalarWhereInput[]
  OR?: Prisma.CallScalarWhereInput[]
  NOT?: Prisma.CallScalarWhereInput | Prisma.CallScalarWhereInput[]
  id?: Prisma.StringFilter<"Call"> | string
  chatId?: Prisma.StringFilter<"Call"> | string
  callerId?: Prisma.StringFilter<"Call"> | string
  calleeId?: Prisma.StringFilter<"Call"> | string
  startedAt?: Prisma.DateTimeFilter<"Call"> | Date | string
  endedAt?: Prisma.DateTimeNullableFilter<"Call"> | Date | string | null
  duration?: Prisma.IntNullableFilter<"Call"> | number | null
  status?: Prisma.StringFilter<"Call"> | string
}

export type CallUpsertWithWhereUniqueWithoutCalleeInput = {
  where: Prisma.CallWhereUniqueInput
  update: Prisma.XOR<Prisma.CallUpdateWithoutCalleeInput, Prisma.CallUncheckedUpdateWithoutCalleeInput>
  create: Prisma.XOR<Prisma.CallCreateWithoutCalleeInput, Prisma.CallUncheckedCreateWithoutCalleeInput>
}

export type CallUpdateWithWhereUniqueWithoutCalleeInput = {
  where: Prisma.CallWhereUniqueInput
  data: Prisma.XOR<Prisma.CallUpdateWithoutCalleeInput, Prisma.CallUncheckedUpdateWithoutCalleeInput>
}

export type CallUpdateManyWithWhereWithoutCalleeInput = {
  where: Prisma.CallScalarWhereInput
  data: Prisma.XOR<Prisma.CallUpdateManyMutationInput, Prisma.CallUncheckedUpdateManyWithoutCalleeInput>
}

export type CallCreateWithoutChatInput = {
  id?: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
  caller: Prisma.UserCreateNestedOneWithoutCallsMadeInput
  callee: Prisma.UserCreateNestedOneWithoutCallsReceivedInput
}

export type CallUncheckedCreateWithoutChatInput = {
  id?: string
  callerId: string
  calleeId: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
}

export type CallCreateOrConnectWithoutChatInput = {
  where: Prisma.CallWhereUniqueInput
  create: Prisma.XOR<Prisma.CallCreateWithoutChatInput, Prisma.CallUncheckedCreateWithoutChatInput>
}

export type CallCreateManyChatInputEnvelope = {
  data: Prisma.CallCreateManyChatInput | Prisma.CallCreateManyChatInput[]
  skipDuplicates?: boolean
}

export type CallUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.CallWhereUniqueInput
  update: Prisma.XOR<Prisma.CallUpdateWithoutChatInput, Prisma.CallUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.CallCreateWithoutChatInput, Prisma.CallUncheckedCreateWithoutChatInput>
}

export type CallUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.CallWhereUniqueInput
  data: Prisma.XOR<Prisma.CallUpdateWithoutChatInput, Prisma.CallUncheckedUpdateWithoutChatInput>
}

export type CallUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.CallScalarWhereInput
  data: Prisma.XOR<Prisma.CallUpdateManyMutationInput, Prisma.CallUncheckedUpdateManyWithoutChatInput>
}

export type CallCreateManyCallerInput = {
  id?: string
  chatId: string
  calleeId: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
}

export type CallCreateManyCalleeInput = {
  id?: string
  chatId: string
  callerId: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
}

export type CallUpdateWithoutCallerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutCallsNestedInput
  callee?: Prisma.UserUpdateOneRequiredWithoutCallsReceivedNestedInput
}

export type CallUncheckedUpdateWithoutCallerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  calleeId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CallUncheckedUpdateManyWithoutCallerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  calleeId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CallUpdateWithoutCalleeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutCallsNestedInput
  caller?: Prisma.UserUpdateOneRequiredWithoutCallsMadeNestedInput
}

export type CallUncheckedUpdateWithoutCalleeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  callerId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CallUncheckedUpdateManyWithoutCalleeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  callerId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CallCreateManyChatInput = {
  id?: string
  callerId: string
  calleeId: string
  startedAt?: Date | string
  endedAt?: Date | string | null
  duration?: number | null
  status?: string
}

export type CallUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  caller?: Prisma.UserUpdateOneRequiredWithoutCallsMadeNestedInput
  callee?: Prisma.UserUpdateOneRequiredWithoutCallsReceivedNestedInput
}

export type CallUncheckedUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  callerId?: Prisma.StringFieldUpdateOperationsInput | string
  calleeId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CallUncheckedUpdateManyWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  callerId?: Prisma.StringFieldUpdateOperationsInput | string
  calleeId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
}



export type CallSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  callerId?: boolean
  calleeId?: boolean
  startedAt?: boolean
  endedAt?: boolean
  duration?: boolean
  status?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  callee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["call"]>

export type CallSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  callerId?: boolean
  calleeId?: boolean
  startedAt?: boolean
  endedAt?: boolean
  duration?: boolean
  status?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  callee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["call"]>

export type CallSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  callerId?: boolean
  calleeId?: boolean
  startedAt?: boolean
  endedAt?: boolean
  duration?: boolean
  status?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  callee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["call"]>

export type CallSelectScalar = {
  id?: boolean
  chatId?: boolean
  callerId?: boolean
  calleeId?: boolean
  startedAt?: boolean
  endedAt?: boolean
  duration?: boolean
  status?: boolean
}

export type CallOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "chatId" | "callerId" | "calleeId" | "startedAt" | "endedAt" | "duration" | "status", ExtArgs["result"]["call"]>
export type CallInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  callee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CallIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  callee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CallIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  callee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CallPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Call"
  objects: {
    chat: Prisma.$ChatPayload<ExtArgs>
    caller: Prisma.$UserPayload<ExtArgs>
    callee: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    chatId: string
    callerId: string
    calleeId: string
    startedAt: Date
    endedAt: Date | null
    duration: number | null
    status: string
  }, ExtArgs["result"]["call"]>
  composites: {}
}

export type CallGetPayload<S extends boolean | null | undefined | CallDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CallPayload, S>

export type CallCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CallFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CallCountAggregateInputType | true
  }

export interface CallDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Call'], meta: { name: 'Call' } }
  /**
   * Find zero or one Call that matches the filter.
   * @param {CallFindUniqueArgs} args - Arguments to find a Call
   * @example
   * // Get one Call
   * const call = await prisma.call.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CallFindUniqueArgs>(args: Prisma.SelectSubset<T, CallFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CallClient<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Call that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CallFindUniqueOrThrowArgs} args - Arguments to find a Call
   * @example
   * // Get one Call
   * const call = await prisma.call.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CallFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CallFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CallClient<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Call that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallFindFirstArgs} args - Arguments to find a Call
   * @example
   * // Get one Call
   * const call = await prisma.call.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CallFindFirstArgs>(args?: Prisma.SelectSubset<T, CallFindFirstArgs<ExtArgs>>): Prisma.Prisma__CallClient<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Call that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallFindFirstOrThrowArgs} args - Arguments to find a Call
   * @example
   * // Get one Call
   * const call = await prisma.call.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CallFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CallFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CallClient<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Calls that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Calls
   * const calls = await prisma.call.findMany()
   * 
   * // Get first 10 Calls
   * const calls = await prisma.call.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const callWithIdOnly = await prisma.call.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CallFindManyArgs>(args?: Prisma.SelectSubset<T, CallFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Call.
   * @param {CallCreateArgs} args - Arguments to create a Call.
   * @example
   * // Create one Call
   * const Call = await prisma.call.create({
   *   data: {
   *     // ... data to create a Call
   *   }
   * })
   * 
   */
  create<T extends CallCreateArgs>(args: Prisma.SelectSubset<T, CallCreateArgs<ExtArgs>>): Prisma.Prisma__CallClient<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Calls.
   * @param {CallCreateManyArgs} args - Arguments to create many Calls.
   * @example
   * // Create many Calls
   * const call = await prisma.call.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CallCreateManyArgs>(args?: Prisma.SelectSubset<T, CallCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Calls and returns the data saved in the database.
   * @param {CallCreateManyAndReturnArgs} args - Arguments to create many Calls.
   * @example
   * // Create many Calls
   * const call = await prisma.call.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Calls and only return the `id`
   * const callWithIdOnly = await prisma.call.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CallCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CallCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Call.
   * @param {CallDeleteArgs} args - Arguments to delete one Call.
   * @example
   * // Delete one Call
   * const Call = await prisma.call.delete({
   *   where: {
   *     // ... filter to delete one Call
   *   }
   * })
   * 
   */
  delete<T extends CallDeleteArgs>(args: Prisma.SelectSubset<T, CallDeleteArgs<ExtArgs>>): Prisma.Prisma__CallClient<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Call.
   * @param {CallUpdateArgs} args - Arguments to update one Call.
   * @example
   * // Update one Call
   * const call = await prisma.call.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CallUpdateArgs>(args: Prisma.SelectSubset<T, CallUpdateArgs<ExtArgs>>): Prisma.Prisma__CallClient<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Calls.
   * @param {CallDeleteManyArgs} args - Arguments to filter Calls to delete.
   * @example
   * // Delete a few Calls
   * const { count } = await prisma.call.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CallDeleteManyArgs>(args?: Prisma.SelectSubset<T, CallDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Calls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Calls
   * const call = await prisma.call.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CallUpdateManyArgs>(args: Prisma.SelectSubset<T, CallUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Calls and returns the data updated in the database.
   * @param {CallUpdateManyAndReturnArgs} args - Arguments to update many Calls.
   * @example
   * // Update many Calls
   * const call = await prisma.call.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Calls and only return the `id`
   * const callWithIdOnly = await prisma.call.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CallUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CallUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Call.
   * @param {CallUpsertArgs} args - Arguments to update or create a Call.
   * @example
   * // Update or create a Call
   * const call = await prisma.call.upsert({
   *   create: {
   *     // ... data to create a Call
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Call we want to update
   *   }
   * })
   */
  upsert<T extends CallUpsertArgs>(args: Prisma.SelectSubset<T, CallUpsertArgs<ExtArgs>>): Prisma.Prisma__CallClient<runtime.Types.Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Calls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallCountArgs} args - Arguments to filter Calls to count.
   * @example
   * // Count the number of Calls
   * const count = await prisma.call.count({
   *   where: {
   *     // ... the filter for the Calls we want to count
   *   }
   * })
  **/
  count<T extends CallCountArgs>(
    args?: Prisma.Subset<T, CallCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CallCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Call.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CallAggregateArgs>(args: Prisma.Subset<T, CallAggregateArgs>): Prisma.PrismaPromise<GetCallAggregateType<T>>

  /**
   * Group by Call.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CallGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CallGroupByArgs['orderBy'] }
      : { orderBy?: CallGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Call model
 */
readonly fields: CallFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Call.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CallClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  chat<T extends Prisma.ChatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  caller<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  callee<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Call model
 */
export interface CallFieldRefs {
  readonly id: Prisma.FieldRef<"Call", 'String'>
  readonly chatId: Prisma.FieldRef<"Call", 'String'>
  readonly callerId: Prisma.FieldRef<"Call", 'String'>
  readonly calleeId: Prisma.FieldRef<"Call", 'String'>
  readonly startedAt: Prisma.FieldRef<"Call", 'DateTime'>
  readonly endedAt: Prisma.FieldRef<"Call", 'DateTime'>
  readonly duration: Prisma.FieldRef<"Call", 'Int'>
  readonly status: Prisma.FieldRef<"Call", 'String'>
}
    

// Custom InputTypes
/**
 * Call findUnique
 */
export type CallFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * Filter, which Call to fetch.
   */
  where: Prisma.CallWhereUniqueInput
}

/**
 * Call findUniqueOrThrow
 */
export type CallFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * Filter, which Call to fetch.
   */
  where: Prisma.CallWhereUniqueInput
}

/**
 * Call findFirst
 */
export type CallFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * Filter, which Call to fetch.
   */
  where?: Prisma.CallWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Calls to fetch.
   */
  orderBy?: Prisma.CallOrderByWithRelationInput | Prisma.CallOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Calls.
   */
  cursor?: Prisma.CallWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Calls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Calls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Calls.
   */
  distinct?: Prisma.CallScalarFieldEnum | Prisma.CallScalarFieldEnum[]
}

/**
 * Call findFirstOrThrow
 */
export type CallFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * Filter, which Call to fetch.
   */
  where?: Prisma.CallWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Calls to fetch.
   */
  orderBy?: Prisma.CallOrderByWithRelationInput | Prisma.CallOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Calls.
   */
  cursor?: Prisma.CallWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Calls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Calls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Calls.
   */
  distinct?: Prisma.CallScalarFieldEnum | Prisma.CallScalarFieldEnum[]
}

/**
 * Call findMany
 */
export type CallFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * Filter, which Calls to fetch.
   */
  where?: Prisma.CallWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Calls to fetch.
   */
  orderBy?: Prisma.CallOrderByWithRelationInput | Prisma.CallOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Calls.
   */
  cursor?: Prisma.CallWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Calls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Calls.
   */
  skip?: number
  distinct?: Prisma.CallScalarFieldEnum | Prisma.CallScalarFieldEnum[]
}

/**
 * Call create
 */
export type CallCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * The data needed to create a Call.
   */
  data: Prisma.XOR<Prisma.CallCreateInput, Prisma.CallUncheckedCreateInput>
}

/**
 * Call createMany
 */
export type CallCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Calls.
   */
  data: Prisma.CallCreateManyInput | Prisma.CallCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Call createManyAndReturn
 */
export type CallCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * The data used to create many Calls.
   */
  data: Prisma.CallCreateManyInput | Prisma.CallCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Call update
 */
export type CallUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * The data needed to update a Call.
   */
  data: Prisma.XOR<Prisma.CallUpdateInput, Prisma.CallUncheckedUpdateInput>
  /**
   * Choose, which Call to update.
   */
  where: Prisma.CallWhereUniqueInput
}

/**
 * Call updateMany
 */
export type CallUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Calls.
   */
  data: Prisma.XOR<Prisma.CallUpdateManyMutationInput, Prisma.CallUncheckedUpdateManyInput>
  /**
   * Filter which Calls to update
   */
  where?: Prisma.CallWhereInput
  /**
   * Limit how many Calls to update.
   */
  limit?: number
}

/**
 * Call updateManyAndReturn
 */
export type CallUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * The data used to update Calls.
   */
  data: Prisma.XOR<Prisma.CallUpdateManyMutationInput, Prisma.CallUncheckedUpdateManyInput>
  /**
   * Filter which Calls to update
   */
  where?: Prisma.CallWhereInput
  /**
   * Limit how many Calls to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Call upsert
 */
export type CallUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * The filter to search for the Call to update in case it exists.
   */
  where: Prisma.CallWhereUniqueInput
  /**
   * In case the Call found by the `where` argument doesn't exist, create a new Call with this data.
   */
  create: Prisma.XOR<Prisma.CallCreateInput, Prisma.CallUncheckedCreateInput>
  /**
   * In case the Call was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CallUpdateInput, Prisma.CallUncheckedUpdateInput>
}

/**
 * Call delete
 */
export type CallDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
  /**
   * Filter which Call to delete.
   */
  where: Prisma.CallWhereUniqueInput
}

/**
 * Call deleteMany
 */
export type CallDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Calls to delete
   */
  where?: Prisma.CallWhereInput
  /**
   * Limit how many Calls to delete.
   */
  limit?: number
}

/**
 * Call without action
 */
export type CallDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Call
   */
  select?: Prisma.CallSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Call
   */
  omit?: Prisma.CallOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallInclude<ExtArgs> | null
}
