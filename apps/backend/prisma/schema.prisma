// ========== GENERATOR & DATASOURCE ==========
generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== MODELE DANYCH ==========
// Użytkownik systemu czatu
model User {
  id String @id @default(uuid())
  email String @unique
  password String
  displayName String
  status String @default("BUSSY") // Online | Busy | Offline
  avatarUrl String?
  lastSeen DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// relacje
messages Message[] @relation("MessagesSent")
chats UserOnChat[]
readMessages MessageRead[]
notifications Notification[]
callsMade Call[] @relation("CallsMade")
callsReceived Call[] @relation("CallsReceived")
}

// Czaty 1:1 lub grupowe
model Chat {
  id String @id @default(uuid())
  name String?
  isGroup Boolean @default(false)
  createdAt DateTime @default(now())

  // relacje
  members UserOnChat[]
  messages Message[]
  calls Call[]
}

// Relacja wielu do wielu między użytkownikami a czatami
model UserOnChat {
  userId String
  chatId String
  role String @default("member") // member | admin
  joinedAt DateTime @default(now())

  // relacje
  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@id([userId, chatId])
}

// Wiadomości (tekst, obraz, głosówka)
model Message {
  id String @id @default(uuid())
  chatId String
  senderId String
  content String?
  type String @default("text") // text | image | audio
  fileUrl String?
  status String @default("sent") // sent | delivered | read
  createdAt DateTime @default(now())
  editedAt DateTime?
  deletedAt DateTime?

  // relacje
  chat Chat @relation(fields: [chatId], references: [id])
  sender User @relation("MessagesSent", fields: [senderId], references: [id])
  readBy MessageRead[]
}

// Kto i kiedy odczytał wiadomość
model MessageRead {
  userId String
  messageId String
  readAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@id([userId, messageId])
}

// Historia rozmów głosowych (WebRTC)
model Call {
  id String @id @default(uuid())
  chatId String
  callerId String
  calleeId String
  startedAt DateTime @default(now())
  endedAt DateTime?

  duration Int?
  status String @default("completed") // completed | missed | ongoing

  chat Chat @relation(fields: [chatId], references: [id])
  caller User @relation("CallsMade", fields: [callerId], references: [id])
  callee User @relation("CallsReceived", fields: [calleeId], references: [id])
}

// Powiadomienia systemowe (np. zaproszenia)
model Notification {
  id String @id @default(uuid())
  userId String
  type String @default("system") // system | invtie
  message String
  read Boolean @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}